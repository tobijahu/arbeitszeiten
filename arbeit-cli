#!/bin/python3
# -*- coding: utf-8 -*-

'''
This script may be used to...
Or to process a file with a record of start and end times as well as breaks. In a linux environment this may be called using
cat example-arbeitszeiten.csv | awk '{ $1=""; print}' | sed -e 's/,//g' | sed -e 's/\"Gleitzeit\"//g;s/\"Feiertag\"//g;s/\"Urlaub\"//g;s/\"Krank\"//g' | python arbeit-cli
'''


import sys


def eprint(*args, **kwargs):
    '''
    Print to stderr
    '''
    print(*args, file=sys.stderr, **kwargs)


try:
#	from libarbeitszeiten import *
	import libarbeitszeiten as liba
except ImportError:
	eprint('Could not import module libarbeitszeiten. Check, if libarbeitszeiten.py is available in this dir.')


def print_help():
    print("Usage: " + sys.argv[0] + " -e -t 12:00 15:00 15:30")
    print("  -h, --help        diese Hilfe anzeigen und beenden")
    print("      --version     Versionsinformation anzeigen und beenden")
    print("  -e                Startzeit nicht gegeben")
    print("  -t                ")
    print("  -t=5              Gesamte Arbeitszeit des Tages in Minuten")
    print("  -o  --outlaw      Info zu nicht-gesetzeskonformen Eingaben ausgeben")
    print("  -r  --raw         Rohausgabe")
    print("  -u  --uncorrected Zeiten unkorrigiert ausgeben")
    sys.exit(1)


#def option_tagesarbeitsminuten(arg, tagesarbeitsminuten):
def option_tagesarbeitsminuten(arg):
    if not arg.split("=")[0] == '-t':
        return None
    if len(arg.split("=")) > 1:
        if arg.split("=")[1] == '':
            raise ValueError
        elif int(arg.split("=")[1]) < 0:
            raise ValueError('%r ist zu klein' % arg.split("=")[1])
        elif int(arg.split("=")[1]) > 24*60:
            raise ValueError('%r ist zu groß' % arg.split("=")[1])
        tagesarbeitsminuten = arg.split("=")[1]
        return int(tagesarbeitsminuten)
    return None


def option_ende_gegeben(arg):
    if arg.split("=")[0] == '-e':
        return True
    return False


def option_help(arg):
    if arg.split("=")[0] == '-h' or arg.split("=")[0] == '--help':
        return True
    return False


def option_keine_konformitaet_info(arg):
    if arg.split("=")[0] == '-o' or arg.split("=")[0] == '--outlaw':
        return True
    return False


def option_roh(arg):
    if arg.split("=")[0] == '-r' or arg.split("=")[0] == '--raw':
        return True
    return False


def option_unkorrigiert(arg):
    if arg.split("=")[0] == '-u' or arg.split("=")[0] == '--uncorrected':
        return True
    return False


def args_auswerten(*args):
    tagesarbeitsminuten = liba.TAGESARBEITSMINUTEN
    start_gegeben = True
    wert_liste = list(args)
    konformitaetsinfo = True
    roh = False
    unkorrigiert = False
    for arg in args:
        tagesarbeitsminuten_kandidat = option_tagesarbeitsminuten(arg)
        if not tagesarbeitsminuten_kandidat is None:
#        if tagesarbeitsminuten_kandidat:
            tagesarbeitsminuten = tagesarbeitsminuten_kandidat
            wert_liste.remove(arg)
            continue
        elif option_ende_gegeben(arg):
            start_gegeben = False
            wert_liste.remove(arg)
            continue
        elif option_keine_konformitaet_info(arg):
            konformitaetsinfo = False
            wert_liste.remove(arg)
            continue
        elif option_roh(arg):
            roh = True
            wert_liste.remove(arg)
            continue
        elif option_unkorrigiert(arg):
            unkorrigiert = True
            wert_liste.remove(arg)
            continue
        elif option_help(arg):
            print_help()
        elif liba.ist_zeitstring(arg) or liba.ist_minuten(arg):
            return(tagesarbeitsminuten, start_gegeben, konformitaetsinfo, roh, unkorrigiert, wert_liste)
        else:
            raise SyntaxError("Falsches Argument: %r" % arg)
            

def resultat_wrappen(resultat, konform, unkorrigiert):
    '''
    Je nach zurückgegebenen Werten, wird das Ergebnis angezeigt.
    '''

    if len(resultat) != 6:
        raise AssertionError
    if unkorrigiert:
        diff = 0
    else:
        diff = resultat[4]
    if resultat[0]:
        print('Arbeitszeit: %s' % liba.zeitpunkt_zu_zeitstring(liba.minuten_zu_zeitpunkt(resultat[0])))
    if resultat[1]:
        print('Startzeit: %s' % liba.zeitpunkt_zu_zeitstring(liba.minuten_zu_zeitpunkt(resultat[1] - diff)))
    if resultat[2]:
        print('Endzeit: %s' % liba.zeitpunkt_zu_zeitstring(liba.minuten_zu_zeitpunkt(resultat[2] + diff)))
    if (resultat[3] or resultat[3] == 0) and (resultat[1] or resultat[2]):
        print('Pausenzeit: %s' % liba.zeitpunkt_zu_zeitstring(liba.minuten_zu_zeitpunkt(resultat[3] + diff)))
    else:
        print('Pausenzeit: %s' % liba.zeitpunkt_zu_zeitstring(liba.minuten_zu_zeitpunkt(resultat[3])))
    if konform and not resultat[5]:
        if not resultat[0] and diff > 0:
            eprint('Arbeits- und/oder Pausenzeiten an gesetzliche Regelung angepasst.')
            eprint('%r Minute(n) Pause hinzugefügt.' % diff)
        elif resultat[0] and diff > 0:
            eprint('Arbeits- und/oder Pausenzeit nicht gesetzesconform')
            eprint('Zusätzliche Pause von %r Minute(n) erforderlich.' % diff)
        else:
            eprint('Arbeits- und/oder Pausenzeit nicht gesetzesconform')

def wert_liste_verarbeiten(eingabe):
    konv_uebergabe_werte = []
    for item in eingabe:
        if liba.ist_zeitstring(item):
            konv_uebergabe_werte.append(liba.zeitstring_zu_zeitpunkt(item))
        else:
            konv_uebergabe_werte.append(item)
    return konv_uebergabe_werte

def auswerten_wrapped_call(konv_uebergabe_werte, tam=liba.TAGESARBEITSMINUTEN, start_gegeben=True, konformitaetsinfo=True, roh=True, unkorrigiert=False):
    '''
    auswerten() erwartet als zweite Eingabe eine Liste aus integers
    und Zeitpunkten (h,m) mit Stunden h und Minuten m. Die zeitstrings
    in uebergabe[2] enthalten keine Zeitpunkte/Tupel, sondern zeit-
    strings. Deshalb muss hier zunächst konvertiert werden.
    '''
    if start_gegeben == False:
        resultat = liba.auswerten(konv_uebergabe_werte, tam, False)
    else:
        resultat = liba.auswerten(konv_uebergabe_werte, tam)

    if not roh:
        resultat_wrappen(resultat, konformitaetsinfo, unkorrigiert)
    else:
        print(*resultat)


def nonblank_lines(f):
    for l in f:
        line = l.rstrip()
        if line:
            yield line


if __name__ == "__main__":
    '''
    0 : tagesarbeitsminuten
    1 : start_gegeben
    2 : konformitaetsinfo
    3 : roh
    4 : unkorrigiert
    5 : wert_liste
    '''
    if sys.stdin.isatty():
        if len(sys.argv) < 2:
            '''
            Wenn stdin und uebergabe leer sind, gebe die Hilfe aus.
            '''
            print_help()

        uebergabe = args_auswerten(*sys.argv[1:])

        if len(uebergabe) <= 5:
            print("Keine Werte übergeben.")
#            raise SyntaxError("Keine Werte übergeben.")

        if uebergabe[5]:
            ''' 
            Nun die essentielle Auswertung
            '''
            konv_uebergabe_werte = wert_liste_verarbeiten(uebergabe[5])
            auswerten_wrapped_call(konv_uebergabe_werte, uebergabe[0], uebergabe[1], uebergabe[2], uebergabe[3], uebergabe[4])
    else:
        system_arguments = sys.argv[1:]
        for line in nonblank_lines(sys.stdin):
            uebergabe = args_auswerten(*sys.argv[1:], *line.split())
            konv_uebergabe_werte = wert_liste_verarbeiten(uebergabe[5])
#            auswerten_wrapped_call(konv_uebergabe_werte, uebergabe[0], uebergabe[1], uebergabe[2], True, True)
            auswerten_wrapped_call(konv_uebergabe_werte, uebergabe[0], uebergabe[1], True, True, True)
#    else:
#        raise SyntaxError('Something really strang happened')

    sys.exit(0)




